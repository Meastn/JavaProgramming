
INHERITANCA TOPIC:
1. is a relation
2. extends keywods
3. super keyword & constructor
4. Types of Inheritance
5. Is a relation vs. Has a Relation
6. Method Overriding

TODAY (DAY 36)
IS A RELATION
EXTENDS KEYWORS

TOMORROW (DAY 37)
SUPER KEYWORD & CONSTRUCTOR
TYPES OF INHERITANCE

DAY 38
IS RELATION VS. HAS A RELATION
METHOD OVERRIDING

DAY 39
IMPLEMENT  BOTH INHERITANCE AND ENCAPSULATION

INHERİTANCE
1. used for creating an "is a" relationship among classes
2.when "is a " relationship exists between objects, it means that the specialized object
has all the characteristics of the general object
3. It allows one class to inherit the features (variables&methods) of another class

SUPER CLASS (PARENT CLASS)
A) ANIMAL (NAME, BODY, SIZE, WEİGHT, EAT, MOVE)

SUB CLASSES (CHILD CLASSES)
A1) DOG = ANIMAL + (LEGS, BARK)
A2) CAT  = ANIMAL + (LEGS, MEOW, SCRATCH)
A3) FISH = ANIMAL + (SWIM)


4. KEYWORD used for inheritance is EXTENDS

public class Dog extends Animal {

}

5. SUPER CLASS passes/ gives its characteristics to SUB CLASSES
6. SUB CLASSES takes the characteristics of their SUPER CLASS but also have their own
attributes, methods etc.
7. ALL the ACCESSIBLE (private objects and methods can not be seen) variables & methods (depending the ACCESS MODIFIER)
8. Constructors can not be inherited since it has to carry the same name with the class it is defined in
9. But CHILD can call PARENTS Constructor methods
10. Difference between importing and inheriting
    import : borrows    vs.  extends : owns
    Inherit -> pass it through, import -> let using


DEFINITION : Inheritance : to build IS A relation between classes (parent to child, superclass to subclass)

easiest way to get rich
child class (sub class) : can inherit all the variables & methods from the parent class plus can have its own specific
variables and methods

parent class (Super class) : can not inherit anything from child class. Contains all COMMON features that are meant to
be inherited by the CHILDS

Advantages:
    less code
    improves the reusability
    clean
    less memory usage
    easy to maintain

IF THE PARENT CLASS HAS A DEFAULT CONSTRUCTOR WE DONT HAVE TO CALL THE CONSTRUCTOR OF THE PARENT CLASS FROM THE CHILD
CLASSES. BUT IF THE PARENT CLASS HAS A SPECIFICALLY CREATED CONSTRUCTOR YOU HAVE TO CREATE A CHILD CLASS CONSTRUCTOR
USING THE SUPER KEYWORD
YOU CAN ADD CLASS SPECIFIC INSTANCE VARIABLES WITHIN THE SUPER CONSTRUCTOR MANUALLY USING this. keyword

SUPER KEYWORD: refers to the instances of the Current
        this. : it calls instance variables and instance methods (when one of the lcal var has the same name with instance variables
        this(): calls the constructor of the current class. Have to be the first.


super keyword has similar functionaliyt with this () . it refers to the parent of the current class
        super. : it calls the instance variables and instance methods of PARENT CLASS
        super () : it calls the CONSTRUCTOR OF THE PARENT CLASS

SINGLE LEVEL INHERITANCE  : One super class has one child class
HIERARCHICAL INHERITANCE : A super class has more than one child class
MULTILEVEL INHERITANCE
MULTIPLE INHERITANCE : IN JAVA A SUB CLASS CAN NOT INHERIT MORE THAN ONE SUPER CLASS

class Person { // person : a
a
}

class Employee extends Person { // employee : a, b   ( All employees are persons)
b
}

class Tester extends Employee { // tester : a, b, c ( All Testers are Employees and persons)
c
}
------------
TASK 1

Create a super class called Animal
    Variables = name, breed, gender, size, age, color
    Methods = setInfo(), eat(), drink(), move(), sleep(), toString()

Create sub classes (child classes) of dog, cat, tiger

Dog extends Animal:
        bark ()
Cat extends Animal:
        scratch ()
Tiger extends Animal:
        roar ()
        hunt ()
Fish extends Animal:
        swim ()


TASK 2
Create an Employee SUPER CLASS
variables = name, gender, age, jobTitle, id, salary, companyName
methods   = work(), toString(), setInfo()

Create SUB CLASSES of Tester, Developer, Driver


TASK 3:
PHONE Task
ScrumTeam Task


